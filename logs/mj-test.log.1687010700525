INFO  16:00:55,002 - Compiling source file: C:\RTI\PP\pp1lab.templateAST\pp1lab.templateAST\workspace\MJCompiler\test\program.mj
INFO  16:00:55,005 - #2 program
INFO  16:00:55,005 - #15 Program
INFO  16:00:55,005 - #15 class
INFO  16:00:55,005 - #15 A
INFO  16:00:55,005 - #3 {
INFO  16:00:55,005 - #15 int
INFO  16:00:55,005 - #15 x
INFO  16:00:55,005 - #8 ,
INFO  16:00:55,005 - #15 y
INFO  16:00:55,005 - #5 ;
INFO  16:00:55,005 - #4 }
INFO  16:00:55,005 - #15 const
INFO  16:00:55,005 - #15 int
INFO  16:00:55,005 - #15 pi
INFO  16:00:55,006 - #12 =
INFO  16:00:55,006 - #14 3
INFO  16:00:55,006 - #8 ,
INFO  16:00:55,006 - #15 e
INFO  16:00:55,006 - #12 =
INFO  16:00:55,006 - #14 2
INFO  16:00:55,006 - #5 ;
INFO  16:00:55,018 - #15 int
INFO  16:00:55,018 - #15 a
INFO  16:00:55,018 - #8 ,
INFO  16:00:55,018 - #15 b
INFO  16:00:55,018 - #5 ;
INFO  16:00:55,018 - #15 class
INFO  16:00:55,018 - #15 B
INFO  16:00:55,018 - #15 extends
INFO  16:00:55,018 - #15 A
INFO  16:00:55,018 - #3 {
INFO  16:00:55,018 - #15 int
INFO  16:00:55,018 - #15 i
INFO  16:00:55,018 - #5 ;
INFO  16:00:55,018 - #3 {
INFO  16:00:55,018 - #15 int
INFO  16:00:55,018 - #15 getValue
INFO  16:00:55,018 - #6 (
INFO  16:00:55,018 - #15 int
INFO  16:00:55,018 - #15 a
INFO  16:00:55,018 - #7 )
INFO  16:00:55,018 - #15 int
INFO  16:00:55,018 - #15 b
INFO  16:00:55,018 - #5 ;
INFO  16:00:55,018 - #15 bool
INFO  16:00:55,018 - #15 c
INFO  16:00:55,019 - #5 ;
INFO  16:00:55,019 - #3 {
INFO  16:00:55,019 - #10 return
INFO  16:00:55,019 - #15 this
INFO  16:00:55,019 - #15 i
INFO  16:00:55,019 - #11 +
INFO  16:00:55,019 - #15 this
INFO  16:00:55,019 - #15 x
INFO  16:00:55,019 - #14 0
INFO  16:00:55,019 - #11 +
INFO  16:00:55,019 - #15 a
INFO  16:00:55,019 - #5 ;
INFO  16:00:55,019 - #4 }
INFO  16:00:55,019 - #13 void
INFO  16:00:55,019 - #15 m
INFO  16:00:55,019 - #6 (
INFO  16:00:55,019 - #7 )
INFO  16:00:55,019 - #15 int
INFO  16:00:55,019 - #15 a
INFO  16:00:55,019 - #5 ;
INFO  16:00:55,019 - #3 {
INFO  16:00:55,019 - #15 x
INFO  16:00:55,019 - #15 foreach
INFO  16:00:55,019 - #6 (
INFO  16:00:55,019 - #15 a
INFO  16:00:55,020 - #12 =
INFO  16:00:55,020 - #9 print
INFO  16:00:55,020 - #6 (
INFO  16:00:55,020 - #15 a
INFO  16:00:55,020 - #7 )
INFO  16:00:55,020 - #5 ;
INFO  16:00:55,020 - #7 )
INFO  16:00:55,020 - #5 ;
INFO  16:00:55,020 - #4 }
INFO  16:00:55,020 - #4 }
INFO  16:00:55,020 - #4 }
INFO  16:00:55,020 - #15 class
INFO  16:00:55,020 - #15 C
INFO  16:00:55,020 - #15 extends
INFO  16:00:55,020 - #15 B
INFO  16:00:55,020 - #3 {
INFO  16:00:55,020 - #15 A
INFO  16:00:55,020 - #15 theA
INFO  16:00:55,020 - #5 ;
INFO  16:00:55,020 - #15 int
INFO  16:00:55,020 - #15 a
INFO  16:00:55,020 - #5 ;
INFO  16:00:55,020 - #4 }
INFO  16:00:55,020 - #3 {
INFO  16:00:55,020 - #13 void
INFO  16:00:55,020 - #15 main
INFO  16:00:55,021 - #6 (
INFO  16:00:55,021 - #7 )
INFO  16:00:55,021 - #15 A
INFO  16:00:55,021 - #15 a
INFO  16:00:55,021 - #5 ;
INFO  16:00:55,021 - #15 C
INFO  16:00:55,021 - #15 c
INFO  16:00:55,021 - #5 ;
INFO  16:00:55,021 - #15 int
INFO  16:00:55,021 - #15 i
INFO  16:00:55,021 - #5 ;
INFO  16:00:55,021 - #15 int
INFO  16:00:55,021 - #15 x
INFO  16:00:55,021 - #5 ;
INFO  16:00:55,021 - #15 char
INFO  16:00:55,021 - #15 ch
INFO  16:00:55,021 - #5 ;
INFO  16:00:55,021 - #3 {
INFO  16:00:55,021 - #15 a
INFO  16:00:55,021 - #12 =
INFO  16:00:55,021 - #15 new
INFO  16:00:55,022 - #15 A
INFO  16:00:55,022 - #5 ;
INFO  16:00:55,022 - #15 a
INFO  16:00:55,022 - #15 x
INFO  16:00:55,022 - #12 =
INFO  16:00:55,022 - #15 new
INFO  16:00:55,022 - #15 int
INFO  16:00:55,022 - #14 5
INFO  16:00:55,022 - #5 ;
INFO  16:00:55,022 - #15 a
INFO  16:00:55,022 - #15 y
INFO  16:00:55,022 - #12 =
INFO  16:00:55,022 - #15 new
INFO  16:00:55,022 - #15 int
INFO  16:00:55,022 - #14 5
INFO  16:00:55,022 - #5 ;
INFO  16:00:55,022 - #15 c
INFO  16:00:55,023 - #12 =
INFO  16:00:55,023 - #15 new
INFO  16:00:55,023 - #15 C
INFO  16:00:55,023 - #5 ;
INFO  16:00:55,023 - #15 c
INFO  16:00:55,023 - #15 theA
INFO  16:00:55,023 - #12 =
INFO  16:00:55,023 - #15 a
INFO  16:00:55,023 - #5 ;
INFO  16:00:55,023 - #15 c
INFO  16:00:55,023 - #15 x
INFO  16:00:55,023 - #12 =
INFO  16:00:55,023 - #15 new
INFO  16:00:55,023 - #15 int
INFO  16:00:55,023 - #14 5
INFO  16:00:55,023 - #5 ;
INFO  16:00:55,023 - #15 x
INFO  16:00:55,023 - #12 =
INFO  16:00:55,023 - #15 new
INFO  16:00:55,023 - #15 int
INFO  16:00:55,023 - #14 3
INFO  16:00:55,024 - #5 ;
INFO  16:00:55,024 - #15 read
INFO  16:00:55,024 - #6 (
INFO  16:00:55,024 - #15 c
INFO  16:00:55,024 - #15 i
INFO  16:00:55,024 - #7 )
INFO  16:00:55,024 - #5 ;
INFO  16:00:55,024 - #15 i
INFO  16:00:55,024 - #12 =
INFO  16:00:55,024 - #14 0
INFO  16:00:55,024 - #5 ;
INFO  16:00:55,024 - #15 while
INFO  16:00:55,024 - #6 (
INFO  16:00:55,024 - #15 i
INFO  16:00:55,024 - #14 5
INFO  16:00:55,024 - #7 )
INFO  16:00:55,024 - #3 {
INFO  16:00:55,024 - #15 read
INFO  16:00:55,024 - #6 (
INFO  16:00:55,024 - #15 c
INFO  16:00:55,025 - #15 x
INFO  16:00:55,025 - #15 i
INFO  16:00:55,025 - #7 )
INFO  16:00:55,025 - #5 ;
INFO  16:00:55,025 - #15 read
INFO  16:00:55,025 - #6 (
INFO  16:00:55,025 - #15 c
INFO  16:00:55,025 - #15 theA
INFO  16:00:55,025 - #15 x
INFO  16:00:55,025 - #15 i
INFO  16:00:55,025 - #7 )
INFO  16:00:55,025 - #5 ;
INFO  16:00:55,025 - #15 i
INFO  16:00:55,025 - #11 +
INFO  16:00:55,025 - #11 +
INFO  16:00:55,025 - #5 ;
INFO  16:00:55,025 - #4 }
INFO  16:00:55,026 - #15 a
INFO  16:00:55,026 - #8 ,
INFO  16:00:55,026 - #8 ,
INFO  16:00:55,026 - #15 b
INFO  16:00:55,026 - #12 =
INFO  16:00:55,026 - #15 c
INFO  16:00:55,026 - #15 x
INFO  16:00:55,026 - #5 ;
INFO  16:00:55,026 - #9 print
INFO  16:00:55,026 - #6 (
INFO  16:00:55,026 - #15 c
INFO  16:00:55,026 - #15 getValue
INFO  16:00:55,026 - #6 (
INFO  16:00:55,026 - #15 c
INFO  16:00:55,026 - #15 theA
INFO  16:00:55,026 - #15 x
INFO  16:00:55,026 - #14 0
INFO  16:00:55,026 - #7 )
INFO  16:00:55,026 - #7 )
INFO  16:00:55,026 - #5 ;
INFO  16:00:55,026 - #15 c
INFO  16:00:55,027 - #15 m
INFO  16:00:55,027 - #6 (
INFO  16:00:55,027 - #7 )
INFO  16:00:55,027 - #5 ;
INFO  16:00:55,027 - #4 }
INFO  16:00:55,027 - #4 }
